import re
from collections import defaultdict
from types import SimpleNamespace
from aiogram.types import Message
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ContentType
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import Product, Category, ProductImage, ProductVariant
from database.orm_requests import orm_delete_product, orm_delete_product_images, orm_delete_product_variants, orm_get_all_categories, orm_get_all_products, orm_get_category_by_name, orm_save_product_image
from keyboards.admin_keyboards import (
    product_menu,
    get_category_keyboard,
    done_keyboard,
    variant_done_keyboard,
    confirm_product_keyboard)
from utils.role_decorator import admin_required
from utils.validation import is_valid_integer
from database.orm_requests import orm_get_product_by_id
import os
from config import UPLOAD_DIR  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ


admin_router_product_handler = Router()  # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏


def format_product_info(product: Product, category_name: str = None) -> str:
    return (
        f"<b>üìã –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
        f"<b>üÜî ID:</b> {product.id}\n"
        f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description or '‚Äì'}\n"
        f"<b>üí∞ –¶–µ–Ω–∞:</b> {product.price} —Ä—É–±.\n"
        f"<b>üè∑ –ë—Ä–µ–Ω–¥:</b> {product.brand or '‚Äì'}\n"
        f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name or (product.category.name if product.category else '‚Äì')}"
    )

def format_variant_info(variant: ProductVariant, base_price: float = None) -> str:
    final_price = "‚Äì"
    try:
        if base_price is None:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å), –Ω–æ –µ–≥–æ –Ω–µ—Ç, —Ç–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç!!!
            base_price = variant.product.price
        final_price = base_price + variant.additional_price
        final_price -= final_price * (variant.discount_percent / 100)
    except Exception:
        pass

    return (
        f"<b>üìê –†–∞–∑–º–µ—Ä:</b> {variant.size}\n"
        f"<b>üé® –¶–≤–µ—Ç:</b> {variant.color or '‚Äì'}\n"
        f"<b>üí∏ –ù–∞—Ü–µ–Ω–∫–∞:</b> {variant.additional_price} —Ä—É–±.\n"
        f"<b>üîñ –°–∫–∏–¥–∫–∞:</b> {variant.discount_percent}%\n"
        f"<b>üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ:</b> {variant.stock} —à—Ç.\n"
        f"<b>üßæ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {round(final_price, 2) if final_price != '‚Äì' else '‚Äì'} —Ä—É–±."
    ) # –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è, —Ç–∫ —É fake_product –Ω–µ—Ç —Å–≤—è–∑–∏ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏!!!

async def send_product_preview(data: dict, message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –ø–µ—Ä–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    fake_category = SimpleNamespace(name=data.get("category"))

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
    fake_product = Product(
        name=data.get("name"),
        description=data.get("description"),
        price=data.get("price"),
        brand=data.get("brand"),
    )
    category_name = data.get("category")  # –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ç–∫ –≤—ã–∑—ã–≤–∞–ª–∞ –æ—à–∏–±–∫—É –∏–∑-–∑–∞ —Å–≤—è–∑–∏ —Ç–∞–±–ª–∏—Ü

    await message.answer("üîç <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞:</b>", parse_mode="HTML")
    await message.answer(
        format_product_info(fake_product, category_name=category_name),
        parse_mode="HTML"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if data.get("images"):
        await message.answer_photo(data["images"][0])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if data.get("variants"):
        await message.answer("<b>üß© –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞:</b>", parse_mode="HTML")
        for i, variant in enumerate(data["variants"], start=1):
            fake_variant = ProductVariant(
                size=variant["size"],
                color=variant["color"],
                additional_price=variant["additional_price"],
                discount_percent=variant["discount_percent"],
                stock=variant["stock"]
            )
            text = f"<b>–í–∞—Ä–∏–∞–Ω—Ç {i}:</b>\n" + format_variant_info(fake_variant)
            await message.answer(text, parse_mode="HTML")

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=confirm_product_keyboard)


class AddProduct(StatesGroup):  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
    """–û–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î."""
    category = State()
    name = State()
    description = State()
    price = State()
    brand = State()
    images = State()
    variants = State()
    variant_size = State()
    variant_color = State()
    variant_additional_price = State()
    variant_discount = State()
    variant_stock = State()
    confirm = State()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(Command("add_product"))
@admin_router_product_handler.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
@admin_required
async def add_product_start(message: Message, state: FSMContext, session: AsyncSession):
    categories = await orm_get_all_categories(session)

    if not categories:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    # category_buttons = [types.KeyboardButton(c.name) for c in categories]
    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*category_buttons)
    markup = get_category_keyboard(categories)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    await state.set_state(AddProduct.category)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(AddProduct.category)
async def add_product_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.name)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(AddProduct.name)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.description)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(AddProduct.description)
async def add_product_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.price)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(AddProduct.price)
async def add_product_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddProduct.brand)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(AddProduct.brand)
async def add_product_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=done_keyboard
        )
    await state.set_state(AddProduct.images)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(AddProduct.images, F.content_type.in_({ContentType.PHOTO, ContentType.TEXT}))
async def add_product_images(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()

    if "images" not in data:
        data["images"] = []

    if message.content_type == ContentType.PHOTO:
        if len(data["images"]) < 20:
            data["images"].append(message.photo[-1].file_id)
            await state.update_data(images=data["images"])  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {len(data['images'])}/20")
        else:
            await message.answer("–ú–∞–∫—Å–∏–º—É–º 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")

    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await message.answer(f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞. "
                             f"–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö, "
                             f"–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∏–∂–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —Å–Ω–∞—á–∞–ª–∞ "
                             f"(—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, –Ω–∞—Ü–µ–Ω–∫—É, —Å–∫–∏–¥–∫—É, –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ) –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ, "
                             f"–∑–∞—Ç–µ–º —Ç–µ –∂–µ –ø–æ–ª—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç.–¥. "
                             f"–î–ª—è —Ç–æ–≥–æ –∂–µ —Ç–æ–≤–∞—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —Ü–≤–µ—Ç–∞ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å "
                             f"–¥—Ä—É–≥–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:)"
                             )
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, S, M, L, XL):\n"
            f"(–∏–ª–∏ 42, 44, 46, 48):\n"
            )
        await state.set_state(AddProduct.variant_size)


# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–ª–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
@admin_router_product_handler.message(AddProduct.variant_size)
async def handle_variant_size_or_finish(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ü–≤–µ—Ç–∞ –æ–¥–Ω–æ–≥–æ
    –∏ —Ç–æ–≥–æ –∂–µ —Ç–æ–≤–∞—Ä–∞, –∞ —Ç–∞–∫ –∂–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è
    —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'.

    –¢–∞–∫ –∂–µ –¥–æ–±–∞–≤–∏–ª–∞ –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
    """
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤":
        # –∑–∞–≤–µ—Ä—à–∞–µ–º
        data = await state.get_data()
        if "variants" not in data or not data["variants"]:
            await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
            return

        # –î–æ–±–∞–≤–∏–ª–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        await send_product_preview(data, message, message.bot)

        await state.set_state(AddProduct.confirm)
        return

    # –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    size = message.text.strip()
    if not size:
        await message.answer("–†–∞–∑–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(size=size)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π, –ß—ë—Ä–Ω—ã–π):")
    await state.set_state(AddProduct.variant_color)

# –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç
@admin_router_product_handler.message(AddProduct.variant_color)
async def add_variant_color(message: Message, state: FSMContext):
    color = message.text.strip()
    await state.update_data(color=color)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, "
        f"–Ω–∞—Ü–µ–Ω–∫–∞ –≤ —Ä—É–±–ª—è—Ö, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞, "
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, 200):"
        )
    await state.set_state(AddProduct.variant_additional_price)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ü–µ–Ω–∫—É
@admin_router_product_handler.message(AddProduct.variant_additional_price)
async def add_variant_additional_price(message: Message, state: FSMContext):
    try:
        additional_price = float(message.text.strip())
        await state.update_data(additional_price=additional_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
        await state.set_state(AddProduct.variant_discount)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏:")

# –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É
@admin_router_product_handler.message(AddProduct.variant_discount)
async def add_variant_discount(message: Message, state: FSMContext):
    try:
        discount_percent = float(message.text.strip())
        if discount_percent < 0 or discount_percent > 100:
            raise ValueError
        await state.update_data(discount_percent=discount_percent)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
        await state.set_state(AddProduct.variant_stock)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100:")

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
@admin_router_product_handler.message(AddProduct.variant_stock)
async def add_variant_stock(message: Message, state: FSMContext):
    try:
        stock = int(message.text.strip())
        if stock < 0:
            raise ValueError

        data = await state.get_data()  # data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        variants = data.get("variants", [])  # data.get("variants", []) –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

        variants.append({
            "size": data["size"],
            "color": data["color"],
            "additional_price": data["additional_price"],
            "discount_percent": data["discount_percent"],
            "stock": stock,
        })

        await state.update_data(variants=variants)

        await message.answer(
            "‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
            reply_markup=variant_done_keyboard
            )
        await state.set_state(AddProduct.variant_size)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router_product_handler.message(
        AddProduct.confirm,
        F.text.in_({"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "‚ùå –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"})
        )
async def confirm_cancel_product(message: Message, state: FSMContext, session: AsyncSession):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞":
        data = await state.get_data()  # —Ä–∞–±–æ—Ç–∞–µ–º —Å fsm –∫–∞–∫ —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º, —á–∏—Ç–∞–µ–º–∏ –º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await orm_get_category_by_name(session, category_name=data["category"])

        if not category:
            await message.answer("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        new_product = Product(
            name=data["name"],
            description=data["description"],
            price=data["price"],
            brand=data["brand"],
            category_id=category.id,
        )

        session.add(new_product)
        await session.commit()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä.
        if "images" in data and data["images"]:
            for file_id in data["images"]:
                file = await message.bot.get_file(file_id)
                await orm_save_product_image(file, new_product.id, session, message.bot)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
        if "variants" in data and data["variants"]:
            for variant in data["variants"]:
                new_variant = ProductVariant(product_id=new_product.id, **variant)
                session.add(new_variant)

        await session.commit()
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=product_menu)

        await state.clear()

    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞":
        await state.clear()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=product_menu)

    else: # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")



@admin_router_product_handler.message(F.text == "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
@admin_required
async def view_all_products(message: Message, session: AsyncSession):
    products = await orm_get_all_products(session)

    if not products:
        await message.answer("üì¶ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    products_by_category = defaultdict(list)
    for product in products:
        category_name = product.category.name if product.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        products_by_category[category_name].append(product)

    # –í—ã–≤–æ–¥ –≤ —á–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    for category, items in products_by_category.items():
        await message.answer(f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}</b>", parse_mode="HTML")

        for product in items:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
            text = format_product_info(product)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ-–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.answer(text, parse_mode="HTML")


@admin_router_product_handler.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏")
@admin_required
async def view_all_products(message: Message, session: AsyncSession):
    products = await orm_get_all_products(session)

    if not products:
        await message.answer("üì¶ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    products_by_category = defaultdict(list)
    for product in products:
        category_name = product.category.name if product.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        products_by_category[category_name].append(product)

    # –í—ã–≤–æ–¥ –≤ —á–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    for category, items in products_by_category.items():
        await message.answer(f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}</b>", parse_mode="HTML")

        for product in items:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
            text = format_product_info(product)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ-–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.answer(text, parse_mode="HTML")

            # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
            if product.variants:
                for i, variant in enumerate(product.variants, start=1):
                    variant_text = (
                        f"<b>–í–∞—Ä–∏–∞–Ω—Ç {i}:</b>\n" + format_variant_info(variant, base_price=product.price)
                        )
                    await message.answer(variant_text, parse_mode="HTML")
            else:
                await message.answer("üß© –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")


class ViewProduct(StatesGroup):
    """–û–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î."""
    waiting_for_product_id = State()


@admin_router_product_handler.message(Command("view_product"))
@admin_router_product_handler.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä")
@admin_required
async def add_product_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    await state.set_state(ViewProduct.waiting_for_product_id)


@admin_router_product_handler.message(ViewProduct.waiting_for_product_id)
@admin_required
async def handle_view_product(message: Message, state: FSMContext, session: AsyncSession):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ
    try:
        product_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID
    product = await orm_get_product_by_id(session, product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    text = format_product_info(product)
    await message.answer("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>", parse_mode="HTML")
    await message.answer(text, parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if product.images:
        first_image = product.images[0]
        if first_image.image_url.startswith("AgAC"):
            await message.answer_photo(photo=first_image.image_url)
        else:
            path = os.path.join(UPLOAD_DIR, first_image.image_url)
            if os.path.exists(path):
                with open(path, "rb") as f:
                    await message.answer_photo(photo=f)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if product.variants:
        await message.answer("<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞:</b>", parse_mode="HTML")
        for i, variant in enumerate(product.variants, start=1):
            text = f"<b>–í–∞—Ä–∏–∞–Ω—Ç {i}:</b>\n" + format_variant_info(variant, base_price=product.price)
            await message.answer(text, parse_mode="HTML")
    else:
        await message.answer("‚Äî –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    await state.clear()


class EditProduct(StatesGroup):
    """–û–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î."""
    waiting_for_product_id = State()
    choose_field = State()
    new_value = State()
    confirm = State()


@admin_router_product_handler.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
@admin_required
async def start_edit_product(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state(EditProduct.waiting_for_product_id)


@admin_router_product_handler.message(EditProduct.waiting_for_product_id)
@admin_required
async def get_product_for_editing(message: Message, state: FSMContext, session: AsyncSession):
    try:
        product_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    product = await orm_get_product_by_id(session, product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(product_id=product_id)
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π:\n\n"
        " category\n name\n description\n price\n brand",
        parse_mode="HTML"
    )
    await state.set_state(EditProduct.choose_field)


@admin_router_product_handler.message(EditProduct.choose_field)
@admin_required
async def choose_field_to_edit(message: Message, state: FSMContext):
    field = message.text.strip().lower()
    if field not in ["category", "name", "description", "price", "brand"]:
        await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: category, name, description, price, brand")
        return

    await state.update_data(field_to_edit=field)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>{field}</b>:", parse_mode="HTML")
    await state.set_state(EditProduct.new_value)


@admin_router_product_handler.message(EditProduct.new_value)
@admin_required
async def apply_field_change(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    field = data["field_to_edit"]
    product_id = data["product_id"]
    new_value = message.text.strip()

    product = await orm_get_product_by_id(session, product_id)
    if not product:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ (–ø–æ –∏–º–µ–Ω–∏)
    if field == "category":
        category = await orm_get_category_by_name(session, category_name=new_value)
        if not category:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        product.category_id = category.id
    elif field == "price":
        try:
            product.price = float(new_value)
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
    else:
        setattr(product, field, new_value)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ new_value –≤ –∞—Ç—Ä–∏–±—É—Ç field –æ–±—ä–µ–∫—Ç–∞ product

    await session.commit()
    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=product_menu)
    await state.clear()


class EditVariant(StatesGroup):
    """–û–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î."""
    waiting_for_variant_number = State()
    waiting_for_field = State()
    waiting_for_new_value = State()
    waiting_for_final_value = State()


@admin_router_product_handler.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞")
@admin_required
async def start_edit_variant(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç:")
    await state.set_state(EditVariant.waiting_for_variant_number)


@admin_router_product_handler.message(EditVariant.waiting_for_variant_number)
@admin_required
async def select_variant_to_edit(message: Message, state: FSMContext, session: AsyncSession):
    try:
        product_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID —Ç–æ–≤–∞—Ä–∞.")
        return

    product = await orm_get_product_by_id(session, product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not product.variants:
        await message.answer("–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(product_id=product_id)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
    for i, variant in enumerate(product.variants, start=1):
        text += f"\n<b>–í–∞—Ä–∏–∞–Ω—Ç {i}:</b>\n" + format_variant_info(variant, base_price=product.price) + "\n"

    await message.answer(text, parse_mode="HTML")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
    await state.set_state(EditVariant.waiting_for_field)


@admin_router_product_handler.message(EditVariant.waiting_for_field)
@admin_required
async def choose_variant_field(message: Message, state: FSMContext, session: AsyncSession):
    try:
        variant_index = int(message.text.strip()) - 1
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
        return

    data = await state.get_data()
    product = await orm_get_product_by_id(session, data["product_id"])
    variants = product.variants

    if variant_index < 0 or variant_index >= len(variants):
        await message.answer("–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    await state.update_data(variant_index=variant_index)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: size, color, additional_price, discount_percent, stock"
    )
    await state.set_state(EditVariant.waiting_for_new_value)


@admin_router_product_handler.message(EditVariant.waiting_for_new_value)
@admin_required
async def update_variant_field(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    product = await orm_get_product_by_id(session, data["product_id"])
    variant = product.variants[data["variant_index"]]

    text = message.text.strip()

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.update_data(field_to_edit=text)
    await state.set_state(EditVariant.waiting_for_final_value)


@admin_router_product_handler.message(EditVariant.waiting_for_final_value)
@admin_required
async def save_updated_variant(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    field = data["field_to_edit"]
    value = message.text.strip()

    product = await orm_get_product_by_id(session, data["product_id"])
    variant = product.variants[data["variant_index"]]

    try:
        if field in ("additional_price", "discount_percent"):
            setattr(variant, field, float(value))  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ float(value) –≤ –∞—Ç—Ä–∏–±—É—Ç field –æ–±—ä–µ–∫—Ç–∞ variant
        elif field == "stock":
            setattr(variant, field, int(value))
        elif field in ("size", "color"):
            setattr(variant, field, value)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ.")
            return

        await session.commit()
        await message.answer("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=product_menu)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    await state.clear()


class DeleteProduct(StatesGroup):
    """–û–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î."""
    waiting_for_product_id = State()


@admin_router_product_handler.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
@admin_required
async def start_delete_product(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteProduct.waiting_for_product_id)


@admin_router_product_handler.message(DeleteProduct.waiting_for_product_id)
@admin_required
async def handle_delete_product(message: Message, state: FSMContext, session: AsyncSession):
    try:
        product_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID —Ç–æ–≤–∞—Ä–∞.")
        return

    product = await orm_get_product_by_id(session, product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (—Ñ–æ—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ª–æ–∫–∞–ª—å–Ω–æ)
    for image in product.images:
        if not image.image_url.startswith("AgAC"):  # Telegram file_id –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AgAC
            path = os.path.join(UPLOAD_DIR, image.image_url)
            if os.path.exists(path):
                os.remove(path)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    await orm_delete_product_images(session, product_id)
    await orm_delete_product_variants(session, product_id)
    await orm_delete_product(session, product)

    await session.commit()
    await message.answer("üóë –¢–æ–≤–∞—Ä –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=product_menu)
    await state.clear()
