from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import (CallbackQuery, InlineKeyboardMarkup,
                           InlineKeyboardButton, InputMediaPhoto)
from utils.callback_data_filters import ProductCardCallbackFactory
from database.orm_requests import (orm_get_product_with_images,
                                   orm_get_available_sizes_for_product,
                                   orm_add_product_to_cart
                                   )
from keyboards.product_card_keyboards import (
    get_quantity_keyboard,
    get_size_keyboard,
    get_photo_navigation_keyboard
)

product_card_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: product:photo ‚Äî –ª–∏—Å—Ç–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@product_card_router.callback_query(ProductCardCallbackFactory.filter(F.action == 'photo'))
async def change_product_photo(callback: CallbackQuery, callback_data: ProductCardCallbackFactory, session: AsyncSession):
    """–ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞."""

    product_id = callback_data.product_id
    image_index = callback_data.image_index

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–∑ –ë–î
    product, images = await orm_get_product_with_images(product_id, session)

    if not images:
        await callback.answer(f'–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞.')
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –ª–∏—Å—Ç–∞—Ç—å –ø–æ –∫—Ä—É–≥—É
    image_index = image_index % len(image_index)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
    current_photo = images[image_index].file_path

    keyboard = await get_photo_navigation_keyboard((product_id, image_index, images))

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=current_photo,
            caption=f'<b>{product.name}</b>\n\n{product.description}',
            parse_mode='HTML'
        ),
        reply_markup=keyboard
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: product:size ‚Äî –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
@product_card_router.callback_query(ProductCardCallbackFactory.filter(F.action == 'size'))
async def choose_size(callback: CallbackQuery, callback_data: ProductCardCallbackFactory, session: AsyncSession):
    """–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."""

    product_id = callback_data.product_id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
    sizes = await orm_get_available_sizes_for_product(product_id, session)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–ø–∏—Å–∫–æ–≤—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º
    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äî –≤—ã–±–æ—Ä
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –¢–æ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ quantity
    keyboard = await get_size_keyboard(product_id, sizes)

    # edit_reply_markup() - –ø–æ–º–µ–Ω—è—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: product:quantity ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@product_card_router.callback_query(ProductCardCallbackFactory.filter(F.action == 'quantity'))
async def choose_quantity(callback: CallbackQuery, callback_data: ProductCardCallbackFactory):
    """–£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    # –¥–æ—Å—Ç–∞—ë–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–Ω–æ–ø–∫–∏
    product_id = callback_data.product_id
    size = callback_data.size
    quantity = callback_data.quantity

    keyboard = await get_quantity_keyboard(product_id, size, quantity)

    # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ç–µ–∫—Å—Ç
    await callback.message.edit_reply_markup(reply_markup=keyboard)

    #  –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await callback.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: product:add ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
@product_card_router.callback_query(ProductCardCallbackFactory.filter(F.action == 'add'))
async def add_to_card(callback: CallbackQuery, callback_data: ProductCardCallbackFactory, session: AsyncSession):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""

    user_id = callback.from_user.id
    product_id = callback_data.product_id
    size = callback_data.size
    quantity = callback_data.quantity

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É (—Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–∏—à–µ–º –ø–æ–∑–∂–µ)
    await orm_add_product_to_cart(user_id, product_id, size, quantity, session)

    await callback.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É üõí', show_alert=True)


@product_card_router.callback_query(F.data == 'noop')
async def noop_handler(callback: CallbackQuery):
    await callback.answer()
