import re
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import update, delete
from utils.navigation import go_to_main_menu
from database.orm_requests import orm_delete_user, orm_register_user, orm_get_user_by_telegram, orm_update_user_profile
from database.db import async_session
from database.models import User
from sqlalchemy.ext.asyncio import AsyncSession
from keyboards.user_keyboards import profile_menu
from keyboards.main_menu import get_main_menu
from utils.user_check import is_admin, is_registered, user_check



registration_router = Router()


# --- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
EMAIL_REGEX = r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"
PHONE_REGEX = r"^\+?[0-9\-]{7,15}$"  # –ü—Ä–∏–º–µ—Ä: +1234567890 –∏–ª–∏ 123-456-7890


def is_valid_full_name(full_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞."""
    return len(full_name.split()) >= 2

def is_valid_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é."""
    return re.match(EMAIL_REGEX, email) is not None

def is_valid_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    return re.match(PHONE_REGEX, phone) is not None

def get_field_value(input_value: str, current_value: str, validator=None) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
      - –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ ".", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
      - –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
      - –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç input_value.
    """
    input_value = input_value.strip()
    if input_value == ".":
        return current_value
    if input_value == "-":
        return None
    if validator and not validator(input_value):
        return None
    return input_value


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Registration(StatesGroup):
    """–•—Ä–∞–Ω–∏—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    full_name = State()
    email = State()
    phone = State()


# @registration_router.message(Command("register"))
@registration_router.message(lambda message: message.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register_start(message: Message, state: FSMContext, session: AsyncSession):
    user = await user_check(session, message.from_user.id)
    if not user:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
            )
        await state.set_state(Registration.full_name)
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')

@registration_router.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if not is_valid_full_name(full_name):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é):"
            )
        return
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–µ—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(Registration.email)

@registration_router.message(Registration.email)
async def process_email(message: Message, state: FSMContext):
    email_input = message.text.strip()
    if email_input != "-" and not is_valid_email(email_input):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@gmail.com):"
            )
        return
    email = None if email_input == "-" else email_input
    await state.update_data(email=email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890):")
    await state.set_state(Registration.phone)

@registration_router.message(Registration.phone)
async def process_phone(message: Message, state: FSMContext, session: AsyncSession):
    phone_input = message.text.strip()
    if not is_valid_phone(phone_input):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890):"
            )
        return
    phone = phone_input
    await state.update_data(phone=phone)
    user_data = await state.get_data()
    registration_data = {
        "telegram_id": message.from_user.id,
        "full_name": user_data.get("full_name"),
        "email": user_data.get("email"),
        "phone": user_data.get("phone")
    }
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ data (middleware –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –µ–µ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è)
    # session = data.get('session')
    # –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–æ–≤
    # session: AsyncSession = data["session"]
    await orm_register_user(session, registration_data)
    info = (
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_data.get('full_name')}\n"
        f"Email: {user_data.get('email') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')}"
    )
    await message.answer(info)
    await state.clear()


@registration_router.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_menu_handler(message: Message, session: AsyncSession):
    user = await user_check(session, message.from_user.id)
    if user:
        await message.answer(
            "–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=profile_menu
        )
    else:
        await message.answer(
            f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª'
            f' —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º, –ø—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
            )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @registration_router.message(Command("my_profile"))
@registration_router.message(lambda message: message.text == 'üëì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def my_profile_handler(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    user = await orm_get_user_by_telegram(session, telegram_id)
    if user:
        text = (
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {user.full_name}\n"
            f"Email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {getattr(user, 'phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y') if user.created_at else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"TelegramID: {telegram_id}\n"
        )
        await message.answer(text)
    else:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, "
            f"–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /register"
            )


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
class EditProfile(StatesGroup):
    """–•—Ä–∞–Ω–∏—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    current_user = State()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    full_name = State()
    email = State()
    phone = State()
    confirm = State()

# @registration_router.message(Command("edit_profile"))
@registration_router.message(lambda message: message.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def edit_profile_start(message: Message, state: FSMContext, session: AsyncSession):
    user = await orm_get_user_by_telegram(session, message.from_user.id)
    if not user:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register."
            )
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(current_user={
        "full_name": user.full_name,
        "email": user.email,
        "phone": user.phone
    })
    await message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
        f"(–∏–ª–∏ ' . ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):"
    )
    await state.set_state(EditProfile.full_name)

@registration_router.message(EditProfile.full_name)
async def edit_full_name(message: Message, state: FSMContext):
    user_data = await state.get_data()
    current = user_data.get("current_user", {})
    new_full_name = get_field_value(
        message.text,
        current.get("full_name"),
        is_valid_full_name
        )
    if new_full_name is None:
        await message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\n "
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, –í–∞—Å–∏–ª–∏–π –ò–≤–∞–Ω–æ–≤):"
            )
        return
    await state.update_data(full_name=new_full_name)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email\n"
        f"(–∏–ª–∏ ' . ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ,\n"
        f"' - ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):"
        )
    await state.set_state(EditProfile.email)

@registration_router.message(EditProfile.email)
async def edit_email(message: Message, state: FSMContext):
    user_data = await state.get_data()
    current = user_data.get("current_user", {})
    new_email = get_field_value(
        message.text,
        current.get("email"),
        is_valid_email
        )
    await state.update_data(email=new_email)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä +79151231234\n "
        f"(–∏–ª–∏ ' . ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):"
        )
    await state.set_state(EditProfile.phone)

@registration_router.message(EditProfile.phone)
async def edit_phone(message: Message, state: FSMContext, session: AsyncSession):
    user_data = await state.get_data()
    current = user_data.get("current_user", {})
    new_phone = get_field_value(
        message.text,
        current.get("phone"),
        is_valid_phone
        )
    await state.update_data(phone=new_phone)
    user_data = await state.get_data()
    info = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_data.get('full_name')}\n"
        f"Email: {user_data.get('email') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')}\n\n"
        "–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª."
    )
    await message.answer(info)
    await state.set_state(EditProfile.confirm)

@registration_router.message(EditProfile.confirm)
async def edit_confirm(message: Message, state: FSMContext, session: AsyncSession):
    confirmation = message.text.strip().lower()
    if confirmation == "–¥–∞":
        user_data = await state.get_data()
        update_data = {
            "full_name": user_data.get("full_name"),
            "email": user_data.get("email"),
            "phone": user_data.get("phone")
        }
        await orm_update_user_profile(session, message.from_user.id, update_data)
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
class DeleteProfile(StatesGroup):
    """–•—Ä–∞–Ω–∏—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    confirm = State()


# @registration_router.message(Command("delete_profile"))
@registration_router.message(lambda message: message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def delete_profile_handler(message: Message, state: FSMContext):
    await message.answer(
        f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n'
        f'–í–≤–µ–¥–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
        )
    await state.set_state(DeleteProfile.confirm)

@registration_router.message(DeleteProfile.confirm)
async def delete_profile_confirm(message: Message, state: FSMContext, session: AsyncSession):
    confirmation = message.text.strip().lower()
    if confirmation == "—É–¥–∞–ª–∏—Ç—å":
        await orm_delete_user(session, message.from_user.id)
        await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@registration_router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, session: AsyncSession):
    await go_to_main_menu(message, session)
