from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from aiogram.fsm.state import State, StatesGroup
from database.models import Category, Product
from utils.navigation import go_to_admin_menu
from utils.role_decorator import admin_required
from utils.validation import is_valid_integer
from keyboards.admin_keyboards import admin_main_menu, category_menu
from database.orm_requests import (
    orm_add_category,
    orm_get_all_categories,
    orm_get_category_by_id,
    orm_update_category,
    orm_delete_category,
    category_has_products
)



admin_category_router = Router()



# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@admin_category_router.message(F.text == "–í—ã–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
@admin_category_router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
@admin_required
async def back_to_admin_menu(message: Message, session: AsyncSession):
    await go_to_admin_menu(message, session)


class CategoryStates(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_category_description = State()
    waiting_for_category_id_for_edit = State()
    waiting_for_new_category_name = State()
    waiting_for_new_category_description = State()
    waiting_for_category_id_for_delete = State()


# ===== –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é =====
@admin_category_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
@admin_required
async def add_category_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryStates.waiting_for_category_name)


@admin_category_router.message(CategoryStates.waiting_for_category_name)
async def add_category_name_received(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
    await state.set_state(CategoryStates.waiting_for_category_description)


@admin_category_router.message(CategoryStates.waiting_for_category_description)
async def add_category_description_received(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    name = data['name']
    description = None if message.text.strip() == '-' else message.text.strip()

    await orm_add_category(session, name=name, description=description)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=category_menu)
    await state.clear()


# ===== –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
@admin_category_router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
@admin_required
async def view_categories(message: Message, session: AsyncSession):
    categories = await orm_get_all_categories(session)
    if not categories:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    else:
        text = "\n".join([f"{c.id}. {c.name} ‚Äî {c.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}" for c in categories])
        await message.answer(f"üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n{text}")


# ===== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é =====
@admin_category_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
@admin_required
async def edit_category_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state(CategoryStates.waiting_for_category_id_for_edit)


@admin_category_router.message(CategoryStates.waiting_for_category_id_for_edit)
async def edit_category_id_received(message: Message, state: FSMContext, session: AsyncSession):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ
    category_id = await is_valid_integer(message, "ID")

    if category_id is None:
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ—Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    category = await orm_get_category_by_id(session, category_id)
    if not category:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(category_id=category_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryStates.waiting_for_new_category_name)


@admin_category_router.message(CategoryStates.waiting_for_new_category_name)
async def edit_category_new_name(message: Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
    await state.set_state(CategoryStates.waiting_for_new_category_description)


@admin_category_router.message(CategoryStates.waiting_for_new_category_description)
async def edit_category_new_description(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    category_id = data['category_id']
    new_name = data['new_name']
    new_description = None if message.text.strip() == '-' else message.text.strip()

    await orm_update_category(session, category_id, new_name, new_description)
    await message.answer(f"‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_name}", reply_markup=category_menu)
    await state.clear()


# ===== –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é =====
@admin_category_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
@admin_required
async def delete_category_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(CategoryStates.waiting_for_category_id_for_delete)


@admin_category_router.message(CategoryStates.waiting_for_category_id_for_delete)
async def delete_category_confirm(message: Message, state: FSMContext, session: AsyncSession):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ
    category_id = await is_valid_integer(message, "ID")

    if category_id is None:
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    category = await orm_get_category_by_id(session, category_id)
    if not category:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if await category_has_products(session, category_id):
        await message.answer(f"‚ö†Ô∏è –£ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã."
                             f"–£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    deleted = await orm_delete_category(session, category_id)
    if deleted:
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=category_menu)
    else:
        await message.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
    await state.clear()
