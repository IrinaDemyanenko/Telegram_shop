import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import BOT_TOKEN
from database.db import create_db, async_session
from database.db_middleware import DataBaseSession
from handlers.user_handlers import user_router
from handlers.admin_handlers import admin_router
from handlers.superuser_handlers import superuser_router
from notifications.notifications import send_notifications
from handlers.review_handlers import review_router
from handlers.registration_handlers import registration_router
from handlers.admin_product_handler import admin_router_product_handler
from handlers.menu_handlers import menu_router
from handlers.admin_category_handlers import admin_category_router
from config import UPLOAD_DIR
from utils.cancel_command import cancel_router
from handlers.catalog_handlers import catalog_router
from handlers.product_card_handlers import product_card_router


print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {UPLOAD_DIR.resolve()}")


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
scheduler = AsyncIOScheduler()

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00
scheduler.add_job(
    lambda: asyncio.create_task(send_notifications(bot)),
    CronTrigger(hour=18, minute=0, timezone="Europe/Moscow")
)

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
async def scheduled_job():
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await bot.send_message(chat_id=123456789, text="–≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00)
scheduler.add_job(scheduled_job, CronTrigger(hour=12, minute=0, timezone="Europe/Moscow"))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "/menu" –≤ –∫–Ω–æ–ø–∫–µ —Å —Ç—Ä–µ–º—è –ø–æ–ª–æ—Å–∫–∞–º–∏
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command='menu', description='–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        BotCommand(command='admin_menu', description='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')  # –î–æ–±–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    ]
    await bot.set_my_commands(commands)

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –±–æ—Ç–∞-–º–∞–≥–∞–∑–∏–Ω–∞."""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    await create_db()

    # –ø–æ–¥–∫–ª—é—á–∏–º db_middleware –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–æ—É—Ç–µ—Ä—É, –Ω–∞ —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π —ç—Ç–∞–ø, –Ω–æ —É–∂–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    dp.update.middleware(DataBaseSession(session_pool=async_session))
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –º–∏–¥–ª–≤–∞—Ä–µ SchedulerMiddleware, —Ç–æ–∂–µ –Ω–∞ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    #dp.update.middleware(SchedulerMiddleware(scheduler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(menu_router)  # –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è /menu –∏ /product_menu
    dp.include_router(user_router)
    dp.include_router(admin_category_router)
    dp.include_router(admin_router)
    dp.include_router(superuser_router)
    dp.include_router(review_router)
    dp.include_router(registration_router)
    dp.include_router(admin_router_product_handler)
    dp.include_router(cancel_router)
    dp.include_router(catalog_router)
    dp.include_router(product_card_router)


    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–º–µ–Ω—é —Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏)
    await set_commands(bot)

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
