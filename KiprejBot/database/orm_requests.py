from typing import Optional
import aiofiles, hashlib
from uuid import uuid4
from sqlalchemy import select, update, delete
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import Category, Review, User, Product, ProductImage, Cart, CartItem, Order, Address, ProductVariant
from pathlib import Path
from config import UPLOAD_DIR
from sqlalchemy.orm import selectinload

# === –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ===
async def orm_register_user(session: AsyncSession, data: dict) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = User(
        telegram_id=data["telegram_id"],
        full_name=data["full_name"],
        email=data.get("email"),  # data.get() —Ç–∫ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        phone=data["phone"]
    )
    session.add(user)
    await session.commit()

async def orm_get_user_by_telegram(session: AsyncSession, telegram_id: int):
    query = select(User).where(User.telegram_id == telegram_id)
    return await session.scalar(query)

async def orm_update_user_profile(session: AsyncSession, telegram_id: int, update_data: dict) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id.
    update_data: —Å–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, full_name, email, phone)
    """
    query = update(User).where(User.telegram_id == telegram_id).values(**update_data)
    await session.execute(query)
    await session.commit()

async def orm_delete_user(session: AsyncSession, telegram_id: int) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id.
    """
    query = delete(User).where(User.telegram_id == telegram_id)
    await session.execute(query)
    await session.commit()


async def orm_get_user_role(session: AsyncSession, telegram_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ telegram_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–æ–ª—å—é ('user', 'admin', 'superuser') –∏–ª–∏ 'user' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    query = select(User.role).where(User.telegram_id == telegram_id)
    result = await session.execute(query)
    role = result.scalar()

    print(f"üé≠ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {role}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É

    return role if role else "user"  # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

# === –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ===
# –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ —Å–≤—è–∑—è–º–∏
def get_base_product_query():
    """–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–≤–æ–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Å–æ —Å–≤–æ–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ id."""
    return select(Product).options(
        selectinload(Product.images),
        selectinload(Product.variants)
    ).order_by(Product.id)


# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def apply_category_filter(query, category_id: Optional[int]):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –ª—é–±–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞."""
    if category_id is not None:
        query = query.where(Product.category_id == category_id)
    return query


# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É (–Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
def apply_size_filter(query, size: Optional[str]):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ç–æ–≤–∞—Ä–∞."""
    if size:
        query = query.where(
            exists().where(
                (ProductVariant.product_id == Product.id) &
                (ProductVariant.size == size)
            )
        )
    return query

async def orm_get_category_by_name(session: AsyncSession, category_name: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é."""
    query = select(Category).where(Category.name == category_name)
    result = await session.execute(query)
    return result.scalar()

async def orm_get_all_categories(session: AsyncSession) -> list[Category]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤."""
    query = select(Category).order_by(Category.name)
    result = await session.execute(query)
    return result.scalars().all()

async def orm_get_filtered_products(
    session: AsyncSession,
    category_id: Optional[int] = None,
    size: Optional[str] = None
) -> list[Product]:
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä—É."""
    query = get_base_product_query()
    query = apply_category_filter(query, category_id)
    query = apply_size_filter(query, size)

    result = await session.execute(query)
    return result.scalars().all()

# === –†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ ===
async def orm_add_product(session: AsyncSession, data: dict) -> Product:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä."""
    product = Product(
        name=data["name"],
        description=data.get("description"),
        price=data["price"]
    )
    session.add(product)
    await session.commit()
    return product

async def orm_get_all_products(session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏,
    –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ ID.
    """
    query = select(Product).options(
        selectinload(Product.category),
        selectinload(Product.variants)
    ).order_by(Product.id)
    result = await session.execute(query)
    return result.scalars().all()

async def orm_get_product_by_id(session: AsyncSession, product_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ id."""
    query = (
        select(Product)
        .options(selectinload(Product.variants), selectinload(Product.images), selectinload(Product.category))
        .where(Product.id == product_id)
    )
    result = await session.execute(query)
    return result.scalars().first()

async def orm_get_all_products_with_variants(session):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
    SQLAlchemy —Å–¥–µ–ª–∞–µ—Ç:
    –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
    –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    –ò —Å–∞–º ¬´—Å–≤—è–∂–µ—Ç¬ª –∏—Ö –≤ Python.
    selectinload - –≤—ã–±–æ—Ä–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞.
    """
    query = select(Product).options(
        selectinload(Product.variants),
        selectinload(Product.category),
    )
    result = await session.execute(query)
    return result.scalars().all()

async def orm_delete_product_images(session, product_id):
    """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–≤–∞—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id —Ç–æ–≤–∞—Ä–∞."""
    query = delete(ProductImage).where(ProductImage.product_id == product_id)
    await session.execute(query)
    await session.commit()

async def orm_delete_product_variants(session, product_id):
    """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–≤–∞—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id —Ç–æ–≤–∞—Ä–∞."""
    query = delete(ProductVariant).where(ProductVariant.product_id == product_id)
    await session.execute(query)
    await session.commit()

async def orm_delete_product(session, product_id):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id —Ç–æ–≤–∞—Ä–∞."""
    query = delete(Product).where(Product.id == product_id)
    await session.execute(query)
    await session.commit()

async def orm_get_available_sizes(session: AsyncSession, category_id: int) -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–¥–µ–∂–¥—ã –≤ –≤—ã–±—Ä–∞–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤."""
    query = (
        select(ProductVariant.size)
        .distinct()
        .join(Product)
        .where(ProductVariant.stock > 0)
    )
    if category_id is not None:
        query = query.where(Product.category_id == category_id)

    result = await session.execute(query)
    return [row[0] for row in result.all() if row[0]]

async def orm_get_available_sizes_for_product(product_id: int, session: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—á —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ
    —Ç–æ–≤–∞—Ä–∞, –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞, –±–µ–∑ –¥—É–±–ª–µ–π.
    """
    query = select(ProductVariant.size).where(ProductVariant.product_id == product_id).distinct()
    result = await session.execute(query)
    sizes = [row[0] for row in result.all() if row[0]]
    return sizes

async def orm_get_product_with_images(product_id: int, session: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä —Å–æ –≤—Å–µ–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (—Å–ø–∏—Å–∫–æ–º –∞–¥—Ä–µ—Å–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π).
    product_id: int - id —Ç–æ–≤–∞—Ä–∞
    session: AsyncSession - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    """
    query = select(Product).where(Product.id == product_id).options(selectinload(Product.images))
    result = await session.execute(query)
    product = result.scalar_one_or_none()

    if not product:
        return None, []
    return product, product.images

async def orm_get_product_variant_by_size(
        session: AsyncSession, product_id: int, size: str
) -> Optional[ProductVariant]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ id —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É.

    session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    product_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.
    size: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä.
    return: –û–±—ä–µ–∫—Ç ProductVariant –∏–ª–∏ None, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    query = select(ProductVariant).where(
        ProductVariant.product_id == product_id,
        ProductVariant.size == size
        )
    result = await session.execute(query)
    variant = result.scalar()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
    return variant

# === –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ ===

async def orm_save_product_image(file, product_id: int, db: AsyncSession, bot=None) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—É—Ç—å –≤ –ë–î

    file: –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ bot.get_file();
    product_id: ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ;
    db: —Å–µ—Å—Å–∏—è –ë–î (AsyncSession), —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ;
    bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (str), –ª–∏–±–æ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    if bot is None:
        raise ValueError("Bot instance must be provided for saving the image.")

    UPLOAD_DIR.mkdir(parents=True, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_ext = file.file_path.split(".")[-1]  # jpg, png –∏ —Ç.–¥.
    filename = f"{product_id}_{uuid4().hex}.{file_ext}"  # –Ω–∞–ø—Ä–∏–º–µ—Ä '42_3fa85f6457174562b3fc2c963f66afa6.jpg'
    file_path = UPLOAD_DIR / filename

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
        await bot.download_file(file.file_path, destination=file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        new_image = ProductImage(product_id=product_id, image_url=str(file_path))
        db.add(new_image)
        await db.commit()

        return str(file_path)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

    # –£–ª—É—á—à–∏–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é: save_product_image(file_id, ..., bot) ‚Äî —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Å–∞–º–∞ —É–º–µ–µ—Ç:
    # –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ file_id;
    # —É–∑–Ω–∞—Ç—å –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram;
    # –∏ —Å–∞–º–∞ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ file_path


# === –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ===
async def orm_category_has_products(session: AsyncSession, category_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã."""
    result = await session.execute(
        select(Product).where(Product.category_id == category_id)
    )
    return result.scalars().first() is not None

async def orm_orm_get_all_categories(session: AsyncSession):
    result = await session.execute(select(Category))
    return result.scalars().all()


async def orm_get_category_by_id(session: AsyncSession, category_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID."""
    result = await session.execute(select(Category).where(Category.id == category_id))
    return result.scalar()


async def orm_add_category(session: AsyncSession, name: str, description: str = None):
    category = Category(name=name, description=description)
    session.add(category)
    await session.commit()
    return category


async def orm_update_category(session: AsyncSession, category_id: int, name: str, description: str = None):
    stmt = (
        update(Category)
        .where(Category.id == category_id)
        .values(name=name, description=description)
    )
    await session.execute(stmt)
    await session.commit()


async def orm_delete_category(session: AsyncSession, category_id: int):
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    result = await session.execute(select(Product).where(Product.category_id == category_id))
    linked_products = result.scalars().all()

    if linked_products:
        return False  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    # –ò—â–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await session.get(Category, category_id)
    if not category:
        return False

    await session.delete(category)
    await session.commit()
    return True

# === –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π ===
async def orm_get_or_create_cart(session: AsyncSession, user: User):
    query = select(Cart).where(Cart.user_id == user.id)
    cart = await session.scalar(query)
    if not cart:
        cart = Cart(user_id=user.id)
        session.add(cart)
        await session.commit()
    return cart

async def orm_add_item_to_cart(
        session: AsyncSession,
        cart: Cart,
        product_id: int,
        quantity: int = 1
) -> None:
    query = select(CartItem).where(CartItem.cart_id == cart.id, CartItem.product_id == product_id)
    item = await session.scalar(query)
    if item:
        item.quantity += quantity
    else:
        item = CartItem(cart_id=cart.id, product_id=product_id, quantity=quantity)
        session.add(item)
    await session.commit()

async def orm_get_cart_items(session: AsyncSession, cart: Cart):
    query = select(CartItem).where(CartItem.cart_id == cart.id)
    result = await session.execute(query)
    return result.scalars().all()

async def orm_get_cart_item(
        session: AsyncSession,
        cart_id: int,
        product_id: int,
        variant_id: int
) -> Optional[CartItem]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ id –∫–æ—Ä–∑–∏–Ω—ã, id —Ç–æ–≤–∞—Ä–∞ –∏ id –≤–∞—Ä–∏–∞–Ω—Ç–∞.

    session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    cart_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã.
    product_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.
    variant_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞.
    return: –û–±—ä–µ–∫—Ç CartItem –∏–ª–∏ None, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    query = select(CartItem).where(
        CartItem.cart_id == cart_id,
        CartItem.product_id == product_id,
        CartItem.variant_id == variant_id
    )
    result = session.execute(query)
    return result.scalar()

async def orm_remove_item_from_cart(session: AsyncSession, cart_item_id: int) -> None:
    stmt = delete(CartItem).where(CartItem.id == cart_item_id)
    await session.execute(stmt)
    await session.commit()

async def orm_add_product_to_cart(
    user_id: int,
    product_id: int,
    size: str,
    quantity: int,
    session: AsyncSession
) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    1. –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id (user_id).
    2. –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    3. –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏ –≤–∞—Ä–∏–∞–Ω—Ç (–ø–æ —Ä–∞–∑–º–µ—Ä—É) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    4. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ ‚Äì —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
       –∏–Ω–∞—á–µ ‚Äì —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã —Å —Ü–µ–Ω–æ–π –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await orm_get_user_by_telegram(session, user_id)
    if not user:
        raise ValueError(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

     # 2. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart = await orm_get_or_create_cart(session, user)

    # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ id
    product = await orm_get_product_by_id(session, product_id)
    if not product:
        raise ValueError(f'–¢–æ–≤–∞—Ä —Å id {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    # 4. –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
    variant = await orm_get_product_variant_by_size(session, product.id, size)
    if not variant:
        raise ValueError(f'–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º {size} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    # 5.–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    price_at_time = variant.get_final_price()

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º,
    # –µ—Å–ª–∏ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ quantity, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π CartItem
    cart_item = await orm_get_cart_item(session, cart.id, product.id, variant.id)
    if cart_item:
        cart_item.quantity += quantity
    else:
        new_item = CartItem(
            cart_id=cart.id,
            product_id=product.id,
            variant_id=variant.id,
            quantity=quantity,
            price_at_time=price_at_time
        )
        session.add(new_item)
    await session.commit()


# === –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ ===
async def orm_create_order(session: AsyncSession, user: User, total_amount: float) -> Order:
    order = Order(user_id=user.id, total_amount=total_amount)
    session.add(order)
    await session.commit()
    return order

async def orm_update_order_payment(session: AsyncSession, order_id: int, is_paid: bool, external_order_id: str = None) -> None:
    stmt = update(Order).where(Order.id == order_id).values(is_paid=is_paid, external_order_id=external_order_id)
    await session.execute(stmt)
    await session.commit()

async def orm_get_orders_for_user(session: AsyncSession, user: User):
    query = select(Order).where(Order.user_id == user.id)
    result = await session.execute(query)
    return result.scalars().all()

async def orm_get_addresses_for_user(session: AsyncSession, user: User):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = select(Address).where(Address.user_id == user.id)
    result = await session.execute(query)
    return result.scalars().all()

async def orm_create_review(session: AsyncSession, data: dict) -> Review:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤.
    –û–∂–∏–¥–∞–µ—Ç—Å—è data: {
       "product_id": int,
       "user_id": int,
       "rating": int,          # –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5
       "comment": str (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    }
    """
    review = Review(
        product_id=data["product_id"],
        user_id=data["user_id"],
        rating=data["rating"],
        comment=data.get("comment")
    )
    session.add(review)
    await session.commit()
    return review

async def orm_get_reviews_for_product(session: AsyncSession, product_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    query = select(Review).where(Review.product_id == product_id, Review.is_approved == True)
    result = await session.execute(query)
    return result.scalars().all()

async def orm_approve_review(session: AsyncSession, review_id: int, is_approved: bool) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞.
    """
    stmt = update(Review).where(Review.id == review_id).values(is_approved=is_approved)
    await session.execute(stmt)
    await session.commit()
